package main

import (
	"context"
	"github.com/redis/go-redis/v9"
	"time"
)


func Populate(rdb *redis.Client , ctx context.Context) error {
	// results from runnig dig command and converting the respone into hex
	DNSResponses := map[string][]byte{
		"example.com.": []byte{
			0x12, 0x34, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x01, 0x00, 0x01,
			0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x04,
			0x5d, 0xb8, 0xd8, 0x22,
		},
		"openai.com.": []byte{
			0x56, 0x78, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x03, 0x63, 0x6f, 0x6d, 0x00,
			0x00, 0x01, 0x00, 0x01,
			0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x04,
			0x68, 0xf4, 0x2a, 0x41,
		},
	}

	// Set fake data in Redis with a TTL of 5 minutes
	for domain, response := range DNSResponses {
		err := rdb.Set( ctx,domain, response, time.Minute*5).Err()
		if err != nil {
			return err
		}
	}

	return nil
}


func cacheDNSResponse(ctx context.Context,client *redis.Client, question string, response []byte, ttl time.Duration ) error {
	return client.Set(ctx, question, response, ttl).Err()
}

func getCachedDNSResponse(ctx context.Context , client *redis.Client, question string) ([]byte, error) {
	return client.Get(ctx, question).Bytes()
}